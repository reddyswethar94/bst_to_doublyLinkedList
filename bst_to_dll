package bst;

/*creating class that converts
 * BST to InorderBST and then to Doubly linked list
 */

public class Treetolist
{
	
	 public static class TreeNode
	 {      
		 /*declaring value,leftnode and right node of the tree*/
	        int val;
	        TreeNode left;         
	        TreeNode right;        
	        TreeNode(int val)
	        {
	            this.val = val;
	        }

	        
	     /*declaring present and prev node of the doubly linked list*/
	    private static class Context
	     {
		   public TreeNode head;
		   public TreeNode prev;
	     }
	     
	  
	    /*main function,values of the tree is given*/
	    public static void main(String[] args)
	     {
	        TreeNode t1 = new TreeNode(10);
	        TreeNode t2 = new TreeNode(5);
	        TreeNode t3 = new TreeNode(15);
	        TreeNode t4 = new TreeNode(3);
	        TreeNode t5 = new TreeNode(6);
	        TreeNode t6 = new TreeNode(20);
	        t1.left = t2;
	        t1.right = t3;
	        t2.left = t4;
	        t2.right = t5;
	        t3.left = t6;
	      
	        Context context = new Context();
	        convert(t1, context);             //inside the function head changes to TreeNode t4(InOrder traversal)
	        print(context.head); 
	    }
	
	    
	    private static void print(TreeNode head)
	    {
		  while(head != null)
	        {
	            System.out.print(" " +head.val);
	            head = head.right;
	        }
	    }
	  
	    
	    /*converting Inorder Bst to doubly linked list*/
	    private static void convert(TreeNode root, Context context) 
	    {
	        if(root == null)
	            return;
	        convert(root.left, context);
	        
	        if(context.prev == null)
	        {
	           context.head = root;
	        }
	        else
	        {
	           root.left = context.prev;
	           context.prev.right = root;
	        }
	        context.prev=root;
	        convert(root.right,context);
	    }
	}

}
